/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package library.view;

import java.awt.Component;
import java.awt.Container;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableColumnModelEvent;
import javax.swing.event.TableColumnModelListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.*;

/**
 *
 * @author Jpoy
 */
public class ViewList extends javax.swing.JFrame {

    /**
     * Creates new form ViewList
     */
    public ViewList() {
        initComponents();
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/leaf24.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @return 
     */
    public void homeListener(ActionListener action){
        home.addActionListener(action);
    }
    public void settingsListener(ActionListener action){
        userSettings.addActionListener(action);
    }
    public void logoutListener(ActionListener action){
        userLogout.addActionListener(action);
    }
    public void chargeListener(ActionListener action){
        chargeMenu.addActionListener(action);
    }
    public void returnListener(ActionListener action){
        returnMenu.addActionListener(action);
    }
    public void booksListener(ActionListener action){
        booksMenu.addActionListener(action);
    }
    public void borrowersListener(ActionListener action){
        borrowersMenu.addActionListener(action);
    }
    public void setUser(String user){
        userMenu.setText(user);
    }
    
    
    public String getSelectedOption(){
        return listOptions.getItemAt(listOptions.getSelectedIndex());
    }
    public void initTable(Object[][] data, String[] header){
        
        tableList = new JTable(data, header)
          {
            private boolean trackViewportWidth = false;
            private boolean inited = false;
            private boolean ignoreUpdates = false;

            @Override
            protected void initializeLocalVars() {
                super.initializeLocalVars();
                inited = true;
                updateColumnWidth();
            }

            @Override
            public void addNotify() {
                super.addNotify();
                updateColumnWidth();
                getParent().addComponentListener(new ComponentAdapter() {
                    @Override
                    public void componentResized(ComponentEvent e) {
                        invalidate();
                    }
                });
            }

            @Override
            public void doLayout() {
                super.doLayout();
                if (!ignoreUpdates) {
                    updateColumnWidth();
                }
                ignoreUpdates = false;
            }

            protected void updateColumnWidth() {
                if (getParent() != null) {
                    int width = 0;
                    for (int col = 0; col < getColumnCount(); col++) {
                        int colWidth = 0;
                        for (int row = 0; row < getRowCount(); row++) {
                            int prefWidth = getCellRenderer(row, col).
                                    getTableCellRendererComponent(this, getValueAt(row, col), false, false, row, col).
                                    getPreferredSize().width;
                            colWidth = Math.max(colWidth, prefWidth + getIntercellSpacing().width);
                        }

                        TableColumn tc = getColumnModel().getColumn(convertColumnIndexToModel(col));
                        tc.setPreferredWidth(colWidth);
                        width += colWidth;
                    }

                    Container parent = getParent();
                    if (parent instanceof JViewport) {
                        parent = parent.getParent();
                    }

                    trackViewportWidth = width < parent.getWidth();
                }
            }

            @Override
            public void tableChanged(TableModelEvent e) {
                super.tableChanged(e);
                if (inited) {
                    updateColumnWidth();
                }
            }

            @Override
            public boolean getScrollableTracksViewportWidth() {
                return trackViewportWidth;
            }

            @Override
            protected TableColumnModel createDefaultColumnModel() {
                TableColumnModel model = super.createDefaultColumnModel();
                model.addColumnModelListener(new TableColumnModelListener() {
                    @Override
                    public void columnAdded(TableColumnModelEvent e) {
                    }

                    @Override
                    public void columnRemoved(TableColumnModelEvent e) {
                    }

                    @Override
                    public void columnMoved(TableColumnModelEvent e) {
                        if (!ignoreUpdates) {
                            ignoreUpdates = true;
                            updateColumnWidth();
                        }
                    }

                    @Override
                    public void columnMarginChanged(ChangeEvent e) {
                        if (!ignoreUpdates) {
                            ignoreUpdates = true;
                            updateColumnWidth();
                        }
                    }

                    @Override
                    public void columnSelectionChanged(ListSelectionEvent lse) {
                    
                    }
                    
                });
                return model;
            }
        };
        
        tableScrollPane.setViewportView(tableList);
        
    }
    public void resizeColumnWidth(){
        TableColumnModel columnModel = tableList.getColumnModel();
        JTableHeader header = tableList.getTableHeader();
        
        for (int column = 0; column < tableList.getColumnCount(); column++) {
        int width = 20; // Min width
            for (int row = 0; row < tableList.getRowCount(); row++) {
                TableCellRenderer renderer = tableList.getCellRenderer(row, column);
                Component comp;
                comp = tableList.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width +1 , width);
            }
            if(width > 300){
                width=300;
            }
            
        columnModel.getColumn(column).setPreferredWidth(width);
        
        }
        tableList.setOpaque(false);
        tableList.setColumnModel(columnModel);
        tableList.setPreferredScrollableViewportSize(tableList.getPreferredSize());
    }
    public void tableReset(){
        tableList = null;
        tableScrollPane.setViewportView(null);
    }
    public void addTableListener(TableModelListener request){
        tableList.getModel().addTableModelListener(request);
    }
    public String getFirstCol(int row){
        return (String) tableList.getValueAt(row, 0);
    }
    public int tableSelectedRow(){
        return tableList.getSelectedRow();
    }
    public int tableSelectedCol(){
        return tableList.getSelectedColumn();
    }
    
    
    public void setDate(String date){
        dateMenu.setText(date);
    }
    public void setTime(String time){
        timeMenu.setText(time);
    }
    
    public void detailsBtnText(String txt, Icon icon){
        detailsBtn.setText(txt);
        detailsBtn.setIcon(icon);
    }
    public void enableDetailBtn(){
        detailsBtn.setEnabled(true);
    }
    public void disableDetailBtn(){
        detailsBtn.setEnabled(false);
    }
    public void enableDeleteBtn(){
        deleteBtn.setEnabled(true);
    }
    public void disableDeleteBtn(){
        deleteBtn.setEnabled(false);
    }
    public void enableAddBtn(){
        addBtn.setEnabled(true);
    }
    public void disableAddBtn(){
        addBtn.setEnabled(false);
    }
    public void enableButtons(){
        deleteBtn.setEnabled(true);
        detailsBtn.setEnabled(true);
    }
    public void disableButtons(){
        deleteBtn.setEnabled(false);
        detailsBtn.setEnabled(false);
    }
    public void showButtons(){
        showAdd();
        showDelete();
        showDetails();
    }
    public void hideButtons(){
        hideAdd();
        hideDelete();
        hideDetails();
    }
    public void showAdd(){
        addBtn.setVisible(true);
    }
    public void hideAdd(){
        addBtn.setVisible(false);
    }
    public void showDelete(){
        deleteBtn.setVisible(true);
    }
    public void hideDelete(){
        deleteBtn.setVisible(false);
    }
    public void showDetails(){
        detailsBtn.setVisible(true);
    }
    public void hideDetails(){
        detailsBtn.setVisible(false);
    }
    public void setAddText(String str, ImageIcon icon){
        addBtn.setText(str);
        addBtn.setIcon(icon);
    }
    public void setDeleteText(String str, ImageIcon icon){
        deleteBtn.setText(str);
        deleteBtn.setIcon(icon);
    }
    
    public void tableListener(MouseListener action){
        tableList.addMouseListener(action);
    }
    public void addListOptionListener(ActionListener request){
        listOptions.addActionListener(request);
    }
    public void addListener(ActionListener request){
        addBtn.addActionListener(request);
    }
    public void deleteListener(ActionListener request){
        deleteBtn.addActionListener(request);
    }
    public void detailsListener(ActionListener request){
        detailsBtn.addActionListener(request);
    }
    public void cancelListener(ActionListener request){
        cancelBtn.addActionListener(request);
    }
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        listOptions = new javax.swing.JComboBox<>();
        tableScrollPane = new javax.swing.JScrollPane();
        cancelBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        detailsBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        userMenu = new javax.swing.JMenu();
        home = new javax.swing.JMenuItem();
        userSettings = new javax.swing.JMenuItem();
        userLogout = new javax.swing.JMenuItem();
        dateMenu = new javax.swing.JMenu();
        timeMenu = new javax.swing.JMenu();
        circulationMenu = new javax.swing.JMenu();
        chargeMenu = new javax.swing.JMenuItem();
        returnMenu = new javax.swing.JMenuItem();
        booksMenu = new javax.swing.JMenuItem();
        borrowersMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Relax - View Lists");
        setLocation(new java.awt.Point(200, 100));

        bg.setPreferredSize(new java.awt.Dimension(600, 400));

        listOptions.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Select --","Books","Transactions", "Borrowers", "Returned Books", "Unreturned Books"}));

        cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/back.png"))); // NOI18N
        cancelBtn.setText("Back");

        addBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/plus.png"))); // NOI18N
        addBtn.setText("Add");

        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/garbage16.png"))); // NOI18N
        deleteBtn.setText("Delete");

        detailsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/viewdetails.png"))); // NOI18N
        detailsBtn.setText("Details");

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addComponent(listOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(detailsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelBtn)
                    .addComponent(addBtn)
                    .addComponent(deleteBtn)
                    .addComponent(detailsBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 532, Short.MAX_VALUE))
        );

        userMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/user.png"))); // NOI18N
        userMenu.setText("User");

        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/home24.png"))); // NOI18N
        home.setText("Home");
        userMenu.add(home);

        userSettings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/settings.png"))); // NOI18N
        userSettings.setText("Settings");
        userMenu.add(userSettings);

        userLogout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/logout.png"))); // NOI18N
        userLogout.setText("Logout");
        userMenu.add(userLogout);

        jMenuBar1.add(userMenu);

        dateMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/calendar.png"))); // NOI18N
        dateMenu.setText("Date");
        jMenuBar1.add(dateMenu);

        timeMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/clock.png"))); // NOI18N
        timeMenu.setText("Time");
        jMenuBar1.add(timeMenu);

        circulationMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/redbook24.png"))); // NOI18N
        circulationMenu.setText("Circulation");

        chargeMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/out24.png"))); // NOI18N
        chargeMenu.setText("Charge Out");
        circulationMenu.add(chargeMenu);

        returnMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/return24.png"))); // NOI18N
        returnMenu.setText("Return Books");
        circulationMenu.add(returnMenu);

        booksMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/books24.png"))); // NOI18N
        booksMenu.setText("Books");
        circulationMenu.add(booksMenu);

        borrowersMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/library/view/images/users24.png"))); // NOI18N
        borrowersMenu.setText("Borrowers");
        circulationMenu.add(borrowersMenu);

        jMenuBar1.add(circulationMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewList().setVisible(true);
            }
        });
    }
    
    
    
    private JTable tableList;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JPanel bg;
    private javax.swing.JMenuItem booksMenu;
    private javax.swing.JMenuItem borrowersMenu;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JMenuItem chargeMenu;
    private javax.swing.JMenu circulationMenu;
    private javax.swing.JMenu dateMenu;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton detailsBtn;
    private javax.swing.JMenuItem home;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JComboBox<String> listOptions;
    private javax.swing.JMenuItem returnMenu;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JMenu timeMenu;
    private javax.swing.JMenuItem userLogout;
    private javax.swing.JMenu userMenu;
    private javax.swing.JMenuItem userSettings;
    // End of variables declaration//GEN-END:variables
}
